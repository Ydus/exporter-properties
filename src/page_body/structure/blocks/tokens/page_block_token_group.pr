{* Get block payload. We are fetching both block and group from context as we want to reuse this blueprint for different groups, not just the one defined inside block itself *}
{[ const block = context.block /]}
{[ const group = context.group /]}
{[ const tokens = ds.tokensByGroupId(group.id) /]}

{* Ignore group content if it is empty *}
{[ if (tokens.count() > 0) ]}
    <div class="token-container">
        {* Show group header consisting of group segments and current group name *}
        <p class="token-group-header">{{ formattedTokenGroupHeader(group, true) }}</p>
        <table class="token-wrapper">
        {* Render all tokens *}
        {[ for token in tokens ]}
        <tr class="color">
            <td>{[ inject "page_block_token_preview_small" context token /]}</td>
            <td>{{ token.name }}</td>
            <td>{{ token.description ? token.description : "No description" }}</td>
            <td>
            {[ inject "page_block_token_value" context token /]}       
            {[ for prop in token.properties ]}
                {[ if prop.type.equals("String") ]}
                    {[ if prop.value ]}
                        <br /><span class="label">{{ prop.name }}</span>: <span class="custom-value">{{ prop.value.toString() }}</span>
                    {[/]}
                {[ else ]}
                    <br /><span class="label">{{ prop.name }}</span>: <span class="custom-value">{{ prop.value.toString() }}</span>
                {[/]}
            {[/]}
            </td>
        </tr>
        {[/]}
        </table>
    </div>
    {[/]}
{[/]}

{* Render nested groups, if enabled *}
{[ if block.showNestedGroups ]}
    {[ for subgroup in group.subgroups ]}
        {[ inject "page_block_token_group" context ({"block": block, "group": subgroup }) /]}
    {[/]}
{[/]}
            